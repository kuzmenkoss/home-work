package oreilly;

public class Puzzle4 {
    public static void main(String[] args) {
        Puzzle4b[] obs = new Puzzle4b[6]; // длина массива 6, это значит что obs хранит 6 ссылок на объекты класса Puzzle4b.
        int y = 1;
        int x = 0;
        int result = 0;
        while (x < 6) { // цифра 6 здесь стоит, чтобы ровно 6 раз повторить действие и в массив сохранить соответствующие 6 объектов.
            obs[x] = new Puzzle4b(); // если этого не сделать, то и во всех ячейках массива от obs[0] до obs[5] будет null.
            // в элемент масива obs [x] запихивает экземпляр класса Puzzle4b.
            obs[x].ivar = y; // Потом мы эти новые объекты изменяем.
            y = y * 10;
            x = x + 1;
        }
        x = 6; //  цифру 6 можно заменить на obs.length(), чтобы потом можно было изменить длину массива.
        while (x > 0) {
            x = x - 1;
            result = result + obs[x].doStuff(x); /* 3. doStuff(x) вызывает метод класса Puzzle4b и передаёт туда х, obs не может быть равно 1. Ведь это массив объектов.
            при первой итерации x = 5, при второй x = 4 и так до 1. по порядку вызывается метод doStuff() объекта obs[5] и
 передаётся число x = 5, потом вызывается obs[4].doStuff(4) и так до obs[1].doStuff(1). */
        }
        System.out.println("Result " + result); // Здесь будет сумма результатов метода doStuff(), а именно 543345.
    }
}

class Puzzle4b { // Понимаете в чём дело, у вас не один класс, а 6 объектов этого класса. В каждом своё число int ivar.  какое число выйдет это зависит от int ivar. и оно не из класса выйдет а из метода public int doStuff
    int ivar;

    public int doStuff(int factor) { /* да, когда вы передаёте сюда число или переменную с любым названием (не важно x, ivar, factor или ещё как-нибудь), factor приравняется к этому числу. Как бы перед началом этого метода, если вы в него передали x, есть строчка factor = x; х это тоже самое что и int factor */
        if (ivar > 100) {
            return ivar * factor; // Как только выполняется строчка с return, метод завершается и возвращает выражение после return.
        } else {
            return ivar * (5 - factor);
        } // т.е. если ivar больше 100, то метод вернёт ivar * factor, а если меньше, то вернёт ivar * (5 - factor).
    }
}